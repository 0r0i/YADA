@startuml
title Delimited Response Activity
skinparam defaultTextAlignment center
skinparam activity {
  StartColor #634929
  EndColor #634929
  BackgroundColor #FED300
  BorderColor #923222
  ArrowColor #923222
}
|Service|
start
:composeResponse;
:getDefaultResponse;
|AbstractConverter|
|ResultSetResultDelimitedConverter|
|AbstractResponse|
|DelimitedResponse|
:response.compose;

|AbstractResponse|
:setYADAQueryResults;
|ResultSetResultDelimitedConverter|
|DelimitedResponse|
:set default colsep;
:set default recsep;
repeat
  :setYADAQueryResult\n(local);
  :set local colsep;
  :set local recsep;
  repeat
    :append(result);
    |AbstractResponse|
    :getConverter;
    if(harmonyMap is not null) then (yes)
    |AbstractConverter|
      :setHarmonyMap;
      note right
        Global HarmonyMap passed
        from YADAQueryResult
        
        Any delimited response requires
        the Global HarmonyMap because
        columns must be aligned
      end note
    |AbstractResponse|
    endif
    |ResultSetResultDelimitedConverter|
    :converter\n.convert;
    :getDelimitedRows;
    |AbstractConverter|
    :get harmonyMap;
      note right
        Global HarmonyMap passed
        from Response
      end note
    |ResultSetResultDelimitedConverter|
    :get resultsetmetadata;
    :get column count;
    :construct header;
    note right
      column counts and names 
      should be stored for later review
      so colums can be stitched together
      and "empty" columns accounted for
      across result sets
    end note
    repeat
      :get column name\nfrom rsmd;
      |AbstractConverter|
      if(isHarmonized) then (yes)
        if(harmonyMap has col) then (yes)
          :get mapped colname;
        endif
      endif
      |ResultSetResultDelimitedConverter|
      :addConvertedHeader to yqr;
    repeat while(more columns) is (yes) not (no)
    repeat
      repeat
        if(rs.getString by colname is null) then (yes)
          :set colvalue = null;
        else (no)
          :set colvalue = rs.getString;
        endif
        :add colvalue to List of row values;
      repeat while(more columns) is (yes) not (no)
      :add list of row values to convertedResult list;
    repeat while(more rows in rs) is (yes) not (no)
    :add list of convertedResult lists\nto yqr.convertedResults List;
    |DelimitedResponse|
  repeat while(more results) is (yes) not (no)
repeat while(more yqrs) is (yes) not (no)
repeat
  :build global header;
  note right
    global header is Set of
    unique column names
  end note
repeat while(more headers) is (yes) not (no)
repeat
  :build header;
  note right
    convert header to 
    "coslep"-delimited string
  end note
repeat while(more headers) is (yes) not (no)
repeat
  :get converted header from current yqr;
  repeat
    :get converted results;
    repeat
      :set increment;
      repeat
'        if(current global header is in local header) then (yes)
          :get value at index from row;
          :add value to buffer;
          :add colsep to buffer;
'        end if 
      repeat while(more global headers) is (yes) not (no)
      :add recsep to buffer;
    repeat while(more rows) is (yes) not (no)
  repeat while(more results) is (yes) not (no)
repeat while(more yqrs) is (yes) not (no)
:return DelimitedResponse;
|Service|
:response.toString;
if(pretty?) then (yes)
  :prettyPrint;
endif
:return;
end
@enduml